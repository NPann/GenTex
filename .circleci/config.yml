#version: 2  # use CircleCI 2.0

version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.1.0

# Storing a few handy aliases
aliases:
  - &setup-docker-image-name
    name: Setup docker image name
    command: |
      echo 'export DOCKER_IMAGE_NAME=gentex/main:latest' >> $BASH_ENV
      echo 'export DOCKER_CACHE_NAME=gentex:latest' >> $BASH_ENV

  - &load-docker-image-layer-cache
    name: Load Docker image layer cache
    command: |
      set +o pipefail
      if [ -f ~/caches/${DOCKER_CACHE_NAME}.tar.gz ]; then gunzip -c ~/caches/${DOCKER_CACHE_NAME}.tar.gz | docker load; docker images; fi

  - &build-docker-image
    name: Build docker image
    command: |
      docker build -t ${DOCKER_IMAGE_NAME} -f docker/Dockerfile .

  - &restore-cache
    keys:
      - v1-{{ .Branch }}

  - &save-cache
    key: v1-{{ .Branch }}
    paths:
      - ~/caches/

  - &create-volume-for-remote-mount
    name: Create volume for mounting to remote docker
    command: |
      # create a dummy container which will hold a volume with config
      docker run -it -d --mount 'type=volume,src=source,dst=/src/gentex' --name source-vol alpine /bin/sh
      # copy a repo files into this volume
      docker cp . source-vol:/src/gentex
      # change ownership to gentex (ID:1000) user
      docker exec -it source-vol chown -R 1000:100 /src/gentex
      docker exec -it source-vol ls -l /src/gentex


jobs:

  build:
    environment:
      LANG: en_US.UTF-8
    docker:
      - image: circleci/python:3.7.3
    steps:
      - checkout
      - run: *setup-docker-image-name
      - setup_remote_docker
      - restore_cache: *restore-cache
      - run: *load-docker-image-layer-cache
      - run: *build-docker-image
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p ~/caches
            if [ ! -f ~/caches/${DOCKER_CACHE_NAME}.tar.gz ]; then docker build -f docker/Dockerfile --tag ${DOCKER_IMAGE_NAME} . | grep '\-\-\->' | grep -v 'Using cache' | grep -v 'Running in' | sed -e 's/[ >-]//g' > /tmp/layers.txt; docker save $(cat /tmp/layers.txt) | gzip > ~/caches/${DOCKER_CACHE_NAME}.tar.gz; fi
      - save_cache: *save-cache

  test:
    environment:
      LANG: en_US.UTF-8
    docker:
      - image: circleci/python:3.7.3
    steps:
      - checkout
      - run: *setup-docker-image-name
      - setup_remote_docker
      - restore_cache: *restore-cache
      - run: *load-docker-image-layer-cache
      - run: *build-docker-image
      - run: *create-volume-for-remote-mount
      - run:
          name: Test
          command: |
            docker run -it --volumes-from source-vol --name test ${DOCKER_IMAGE_NAME} pytest --junitxml=test-reports/junit.xml
            docker cp test:/src/gentex/htmlcov .
            docker cp test:/src/gentex/test-reports .
      - store_test_results:
          path: test-reports
      - store_artifacts:
          path: test-reports
      - store_artifacts:
          path: htmlcov
          prefix: coverage

  build_doc:
    environment:
      LANG: en_US.UTF-8
    docker:
      - image: circleci/python:3.7.3
    steps:
      - checkout
      - run: *setup-docker-image-name
      - setup_remote_docker
      - restore_cache: *restore-cache
      - run: *load-docker-image-layer-cache
      - run: *build-docker-image
      - run: *create-volume-for-remote-mount
      - run:
          name: Build doc
          command: |
            docker run -it --volumes-from source-vol --name doc ${DOCKER_IMAGE_NAME} \
              bash -c "cd doc/ && make html"
            docker cp doc:/src/gentex/doc .
      - store_artifacts:
          path: doc/_build/html
          prefix: doc


workflows:
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - build_doc:
          requires:
            - build